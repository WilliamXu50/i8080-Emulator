# Main Code
This project will emulate the intel 8080 CPU as well as the hardware and graphics that Space Invaders runs on.

# Main Loop of the Game
The main loop of the game does the following: 
As long as the player doesn't press exit on the console window or press 'Q', the game will run. Space Invaders runs on 60 fps 
and with a 2 MHz CPU. This means that every second, 60 frames will be updated and displayed on the screen, which would mean that 
every 1/60 secs (or ~17 ms) a new frame will be updated. 

Next we will need a timing system to track the interval of 17 ms. I used the "DL_GetTicks()"built-in function from the SDL library, 
but it can also be done using "ettimeofday()"from "sys/time.h" (assuming you're using an POSIX-compliant OS).

Since 60 frames needs to be updated and displayed in 1 sec (e.g. updated & displayed every 17 ms), we need a conditional that wll check 
if 17 ms has elapsed:

while(not_quit){

    if(//elapsed time >= 17 ms){
         //get user keyboard input
         //Do other stuff...
    }
}

Now to understand what happens after every 17 ms interval, we will examine how the actual game itself is displayed on the screen.
The game updates the screen twice during each frame; once when the video rendering reaches the middle of the screen (during which a 
mid-screen interrupt would trigger), and another one when the rendering reaches the end of the screen (during which an end-of-screen
interrupt would trigger). The game will update and draw the top half of the screen when the mid-screen interrupt triggers, and then draws
the bottom half of the screen when the end-of-screen interrupt triggers. Thus for each frame, the game first draws top then the bottom.

The timing of the mid-screen interrupt and end-of-screen interrupt can be emulated with respect to the number of CPU cycles taken. The total
CPU cycles is just the accumulation of cycles taken by executing instructions. 

Since the 8080 CPU has a clock rate of 2 MHz and the game runs on 60 fps, we can derive the number of CPU cycles taken for each frame:
`CLOCK_RATE/FPS => 2000000 (1/sec) / 60 (frames/sec)`, thus each frame will take `CLOCK_RATE/FPS` CPU cycles. Therefore the mid-screen
interrupt will trigger when the total CPU cycles _for that particular frame_ reaches around ~ half of `CLOCK_RATE/FPS`. Likewise, the
end-of-screen interrupt will trigger after a full `CLOCK_RATE/FPS` cycles has completed:

Below is a code snippet of the main driver loop:

while(machine->quit_status!=1){
    //Every 17 ms a new frame updates (very roughly 60 fps)
    if((SDL_GetTicks() - time) > (1.0f / FPS) * 1000){
       //Update elapsed time
       time=SDL_GetTicks();
            
       //Get user input
       keyboard_handler(machine);

       int total_cycles=0;   //Total number of instruction cycles

       int current_cycle=0;    /*machine->cpu->instruction_cycles-current_cycle
                                      would give the CPU cycles after executing an instruction*/

[1]    while(total_cycles<=HALF_CYCLES_PER_FRAME){
           current_cycle=machine->cpu->instruction_cycles;
           machine_execute(machine);
           total_cycles+=machine->cpu->instruction_cycles-current_cycle;
       }
       //Generate mid-screen interrupt (interrupt number = 1)
       generate_interrupt(machine, 1);

       current_cycle=0;

-------------------------------------------------------------------------------------------------------

 [2]   while(total_cycles<=CYCLES_PER_FRAME){
           current_cycle=machine->cpu->instruction_cycles;
           machine_execute(machine);
           total_cycles+=machine->cpu->instruction_cycles-current_cycle;
       }
       //Generate end-of-screen interrupt (interrupt number = 2)
       generate_interrupt(machine, 2);
            
       machine_update_screen(machine);
       render_graphics(game_display, machine);
    }
}

[1] This part executes the instructions of the game until the total instruction count for that specific frame ("total_cycles") reaches
around HALF_CYCLES_PER_FRAME (half of the maximum cycles for a single frame). Then the mid-screen interrupt would trigger, with the 
interrupt number of 1 (which would set the RST address to 0x0008). 

[2] After the mid-screen ISR is executed, the control is restored to the previous point of execution. The instructions of the game keeps on
executing until "total_cycles" reaches CYCLES_PER_FRAME (the maximum instruction cycles per frame). Then the end-of-screen interrupt would
trigger with the interrupt number of 2 (which would set the RST address to 0x0010)

(note): 
   < current_cycle=machine->cpu->instruction_cycles;
     machine_execute(machine);
     total_cycles+=machine->cpu->instruction_cycles-current_cycle;   >
     
will return the CPU cycles for an instruction after executing it, adding it to the total_cycles. This is done by first storing the current
instruction cycles of the CPU ("machine->cpu->instruction_cycles") into the variable "current_cycle". Then the next instruction is executed by machine-execute(), which also adds in the CPU cycles for the executed instruction into "machine->cpu->instruction_cycles". Then the difference
between the total instruction cycles before and after executing the instruction is added into the total_cycles count.

So, the code snippet above does the following: 
assuming the player doesn't press 'Q' or close the game console, then:

After every 17 ms, the user keyboard input is polled and a new frame needs to be displayed: this is accomplished by continuously executing the game program instructions (as pointed to by the program counter) until the total number of CPU cycles for that frame reaches about ~ HALF_CYCLES_PER_FRAME. Then the mid-screen interrupt would trigger. Specific ISR for mid-screen interrupt would execute, then returns to the normal execution. The game program instructions will continued to be executed until the total number of CPU cycles for that frame reaches reaches ~ CYCLES_PER_FRAME, at which the end-of-screen interrupt would trigger. After both interrupts are serviced, the code will exit the executing instructions loop, update the screen buffer and lastly will update the console screen itself.

This cycle of execution -> mid-screen interrupt -> execution -> end-of-screen interrupt -> update buffer -> update screen will be implemented 
for every new frame to be displayed, for every 17 ms. 

# How the Screen is Displayed
//TODO
